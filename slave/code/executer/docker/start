#!# perl: code/
use warnings;
use strict;

use AntDen;
use POSIX qw( :sys_wait_h );

=head3 param

  resources:
    [ 'CPU', 0, 2 ]
    [ 'PORT', 65111, 1 ]
  param:
    cmd: ''
    image: nginx
    volumes:
      - "/tmp/foo:/tmp/bar:ro"
      - "/tmp/f:/tmp/b"
    antden_repo:
      - 10.10.1.1
      - /data/AntDen_repo/username@xxx.com.1591002050.913979057238
    workdir: /tmp/abc
    port: 80
    datasets: data123

  taskid: J.20191120.191012.907980.111.001

=head3 return

  return executeid, for stop and status, maybe pid or container id

=cut

return sub
{
    my $param = shift @_;

    return $param->{taskid} if fork;
    $0 = $param->{taskid};

    $SIG{INT} = $SIG{TERM} = sub {
        system "pkill -15 -P $$";
        exit 1;
    };

    eval{

        if( $param->{param}{antden_repo} )
        {
            my ( $ip, $path ) = @{$param->{param}{antden_repo}};
            my $cmd = "MYDan_Agent_Load_Code=free.load_antden /opt/mydan/dan/tools/load --host '$ip' --sp '$path.tar.gz' && mkdir -p '$path' && tar -zxvf '$path.tar.gz' -C '$path'";
            warn "$cmd\n";
            die "download antden_repo fail: $!" if system $cmd;
        }

        if( $param->{param}{datasets} )
        {
            map{
                die "mount datasets $_ fail: $!" if system "/opt/mydan/dan/antden/tools/datasets/slave $_ --mount";
            }split /,/, $param->{param}{datasets};
        }

        $param->{param}{cmd} ||= '';

        my $volumes = '';
        $volumes = join ' ', map{ " -v $_ " }@{$param->{param}{volumes}} if $param->{param}{volumes};

        die "mkdir output fail:$!" if system "mkdir -p '/data/AntDen_output/$param->{taskid}'";
        $volumes .= " -v /data/AntDen_output/$param->{taskid}:/_output/ ";

        my $workdir = '';
        $workdir = " --workdir $param->{param}{workdir}" if $param->{param}{workdir};

        my $resources = $param->{resources};
        my ( $mem, $cpu, $gpu, $port ) = ('','','','');
        if( -e "/dev/nvidia0" )
        {
            if( my @gpu = grep{ $_->[0] eq 'GPU' }@$resources )
            {
                $gpu = sprintf " -e NVIDIA_VISIBLE_DEVICES=%s ", join ',', map{ $_->[1] }@gpu;
            }
            else { $gpu = ' --runtime runc '; }
        }

        if( my @mem = grep{ $_->[0] eq 'MEM' }@$resources )
        {
            my $c; map{ $c += $_->[2] }@mem;
            $mem = " --memory ${c}m ";
        }

        if( my @cpu = grep{ $_->[0] eq 'CPU' }@$resources )
        {
            my $c; map{ $c += $_->[2] }@cpu;
            die "get cpu fail" unless `cat /proc/cpuinfo | grep "processor" | wc -l` =~ /(\d+)/;
            my $cc = $1;
           $cpu = sprintf " -c %d ", int( $c / $cc ) || 1;
        }

        if( my @port = grep{ $_->[0] eq 'PORT' }@$resources )
        {
            $port = " -p $port[0][1]:$param->{param}{port} " if $param->{param}{port};
        }

        #TODO

        my $shmsize = '';
        for my $x ( `df -h` )
        {
            chomp $x;
            next unless $x =~ /\s+(\d+\w)\s+\d+\w*\s+\d+\w*\s+\d+%\s+\/dev\/shm$/;
            $shmsize = " --shm-size=$1 "
        }

        my $entrypoint = $param->{param}{cmd};
        $entrypoint = '' if $entrypoint eq '_null_';
        my $cmd = "docker run $shmsize --name $param->{taskid} $port $volumes $workdir $gpu $mem $cpu -d $param->{param}{image} $entrypoint";
        warn "$cmd\n";
        die "docker run fail" unless my $containerid = `$cmd`;
        chomp $containerid;
        die "containerid format error" unless $containerid =~ /^[a-z0-9]+$/;
        die "link log fail: $@" if system "ln -fsn /var/lib/docker/containers/$containerid/$containerid-json.log $AntDen::PATH/logs/task/$param->{taskid}.log";
    };
    if( $@ )
    {
        warn "start docker fail: $@\n";
        #TODO Return this information to slave service
    }
    exit;
};
